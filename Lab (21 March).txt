using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BankAccounnt
{
    abstract class Account
    {
        public string AccName { get; set; }
        public string AccNo { get; set; }
        public double Balance { get; set; }
        Transaction[] transactions;
        public int transactionCount { get; set; }

        public Account() { }
        public Account(string accName, string accNo, double balance)
        {
            AccName = accName;
            AccNo = accNo;
            Balance = balance;
            transactions = new Transaction[50];
        }

        public void Deposit(double amount)
        {
            Balance += amount;
            Console.WriteLine("Your account credit: {0}. Current Balance: {1}", amount, Balance);
            transactions[transactionCount++] = new Transaction(this, this, amount, "Deposit");
        }

        public void addTransaction(params Transaction[] transactionArr)
        {
            foreach (Transaction transaction in transactionArr)
            {
                this.transactions[transactionCount++] = transaction;
            }
        }

        public void showAllTransaction()
        {
            Console.WriteLine("\nTransaction history ({0})", AccName);

            for (int i = 0; i < transactionCount; i++)
            {
                Console.Write(i+1 + ". ");
                transactions[i].showTransactions();
            }
        }

        public void ShowInfo()
        {
            Console.WriteLine("\tAccount Name: " + AccName);
            Console.WriteLine("\tAccount Number: " + AccNo);
            Console.WriteLine("\tCurrent Balance: " + Balance);
            Console.WriteLine();
        }

        public abstract void Withdraw(double amount);
        public abstract void Transfer(Account acc, double amount);
    }

    class Customer
    {
        public string Name { get; set; }
        Account[] accounts;
        public int AccCount;
        public Customer(string name)
        {
            Name = name;
            accounts = new Account[10];
        }

        public void AddAccount(params Account[] accounts)
        {
            foreach(Account acc in accounts)
            {
                this.accounts[AccCount++] = acc;
            }
        }

        public void AccDetails()
        {
            Console.WriteLine("Customer Name: " + Name);

            for(int i=0; i<AccCount; i++)
            {
                accounts[i].ShowInfo();
            }
        }

        public Account findAccount(string accNo)
        {
            Account acc = null;
            for(int i=0; i<AccCount; i++)
            {
                if (accNo.Equals(accounts[i].AccNo))
                {
                    acc = accounts[i];
                    break;
                }
            }
            return acc;
        }
    }

    class Transaction
    {
        private Account sender;
        private Account receiver;
        public double Amount { get; set; }
        public string AdditionalInfo { get; set; }

        public Transaction() { }

        public Transaction(Account sender, Account receiver, double amount, string additionalInfo)
        {
            this.sender = sender;
            this.receiver = receiver;
            AdditionalInfo = additionalInfo;
            Amount = amount;
        }

        public void showTransactions()
        {
            Console.Write("Transaction type: {0}\t ", AdditionalInfo);
            Console.Write("Amount: " + Amount);
            if (AdditionalInfo.ToLower().Equals("transfer"))
            {
                Console.WriteLine("\tSender: {0}({1})", sender.AccName, sender.AccNo);
                Console.Write("\t To: {0}({1})", receiver.AccName, receiver.AccNo);
            }
            Console.WriteLine();
        }
        
    }
 
    class Current:Account
    {
        public Current(string AccName, string AccNo, double balance): base(AccName, AccNo, balance) { }

        public override void Withdraw(double amount)
        {
            if (amount < Balance)
            {
                Balance -= amount;
                Console.WriteLine("Your account debited by {0} to self", amount);
                Transaction tr = new Transaction(this, this, amount, "Withdraw");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("Insufficient Balance!!!");
            }
        }

        public override void Transfer(Account acc, double amount)
        {
            if (amount < Balance)
            {
                Balance -= amount;
                acc.Balance += amount;
                Transaction tr = new Transaction(this, acc, amount, "Transfer");
                base.addTransaction(tr);
                Console.WriteLine("Your account transfer by {0} to the account {1}({2})", amount, acc.AccName, acc.AccNo);
            }
            else
            {
                Console.WriteLine("Insufficient Balance!!!");
            }
        }
    }
    
    class Fixed : Account
    {
        public int openingYear { get; set; }
        public int fixedYear { get; set; }

        public Fixed(string accName, string accNo, double balance, int openingYear, int fixedYear): base(accName, accNo, balance)
        {
            this.openingYear = openingYear;
            this.fixedYear = fixedYear;
        }

        public override void Withdraw(double amount)
        {
            int today = DateTime.Now.Year;
            if(today-openingYear > fixedYear)
            {
                Balance -= amount;
                Transaction tr = new Transaction(this, this, amount, "Withdraw");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("This account is not valid for withdrawal");
            }
        }

        public override void Transfer(Account acc, double amount)
        {
            int today = DateTime.Now.Year;
            if (today - openingYear > fixedYear)
            {
                Balance -= amount;
                acc.Balance += amount;
                Transaction tr = new Transaction(this, acc, amount, "Transfer");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("This account is not valid for transfer");
            }
        }
    }
    
    class Overdraft:Account
    {
        public int limit { get; set; }

        public Overdraft() { }
        public Overdraft(string accName, string accNo, double balance, int limit): base(accName, accNo, balance)
        {
            this.limit = limit;
        }

        public override void Withdraw(double amount)
        {
            if(amount <= Balance + limit)
            {
                Balance -= amount;
                Transaction tr = new Transaction(this, this, amount, "Withdraw");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("Not sufficient fund!!!");
            }
        }
        public override void Transfer(Account acc, double amount)
        {
            if(amount <= Balance + limit)
            {
                Balance -= amount;
                acc.Balance += amount;
                Transaction tr = new Transaction(this, acc, amount, "Transfer");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("Not sufficient fund!!!");
            }
        }
    }

    class Savings:Account
    {

        public Savings(string AccName, string AccNo, double balance): base(AccName, AccNo, balance) { }
        
         public override void Withdraw(double amount)
        {
            if(amount <= Balance - 500)
            {
                Balance -= amount;
                Console.WriteLine("Your account debited by {0} to self", amount);
                Transaction tr = new Transaction(this, this, amount, "Withdraw");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("Insufficient balance, min balance 500");
            }

        }

        public override void Transfer(Account acc, double amount)
        {
            if(amount <= Balance - 500)
            {
                Balance -= amount;
                acc.Balance += amount;
                Console.WriteLine("Your account transfer by {0} to the account {1}({2})", amount, acc.AccName, acc.AccNo);
                Transaction tr = new Transaction(this, acc, amount, "Transfer");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("Insufficient balance, min balance 500");
            }
        }
    }
    
     class SuperSavings: Account
    {
        public double openingAmount { get; set; }
        public SuperSavings(string accName, string accNo, double balance): base(accName, accNo, balance)
        {
            this.openingAmount = balance;
        }

        public override void Withdraw(double amount)
        {
            if(amount <= Balance-(openingAmount * 20 / 100))
            {
                Balance -= amount;
                Transaction tr = new Transaction(this, this, amount, "Withdraw");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("Not sufficient fund. Min amount " + openingAmount * 20 / 100);
            }
        }

        public override void Transfer(Account acc, double amount)
        {
            if (amount <= Balance-(openingAmount * 20 / 100))
            {
                Balance -= amount;
                acc.Balance += amount;
                Transaction tr = new Transaction(this, acc, amount, "Transfer");
                base.addTransaction(tr);
            }
            else
            {
                Console.WriteLine("Not sufficient fund. Min amount " + openingAmount * 20 / 100);
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Account x = new Savings("X", "1", 55000.0f);
            Account y = new Current("Y", "2", 22000f);
            Account z = new Fixed("Z", "3", 10000f, 2019, 50);
            
            Account p = new SuperSavings("P", "4", 1000f);
            p.Deposit(30);
            p.ShowInfo();

            Account q = new Overdraft("Q", "5", 11000f, 4400);
            q.Transfer(p, 4100);
            q.Deposit(14300);
            q.ShowInfo();
            q.showAllTransaction();

            Customer r = new Customer("R");

            y.Deposit(13000);
            y.Transfer(x, 5800);
            y.showAllTransaction();

            x.ShowInfo();
            x.Deposit(2300f);
            x.Transfer(y, 3900);
            x.Withdraw(1000);
            x.showAllTransaction();

            z.Deposit(4600);
            z.Withdraw(1120);
            z.ShowInfo();

            x.Transfer(y, 1200f);
            y.ShowInfo();

            r.AddAccount(x, y);
            r.AccDetails();
        }
    }
}